using System;
using System.Net;

namespace ObjectOriented.CreationalPatterns
{
	/// <summary>
	/// - Creational Patterns
	/// - Builder pattern builds a complex object by using a step by step approach (Separate the construction of a complex object from its representation 
	///   of that the same construction process can create different representations)
	/// - It is used to construct a complex object step by step and the final step will return the object
	/// - The process of constructing an object should be generic so that it can be used to create different representations of the same object
	/// </summary>
	public class BuilderPattern
	{
		public BuilderPattern()
		{
			ApiResponseBuilder responseBuilder;

			var responseDirector = new ApiResponseDirector();

			responseBuilder = new OKBuilder();
			var okObject = responseDirector.Construct(responseBuilder, true, "Data");
			okObject.Display();

			responseBuilder = new NotFoundBuilder();
			var nfObject = responseDirector.Construct(responseBuilder, false, "Id not found");
			nfObject.Display();
		}

		/// <summary>
		/// - The 'Product' class
		/// - The product class defines the type of the complex object that is to be generated by the builder pattern
		/// </summary>
		public class ApiResponse
		{
			private HttpStatusCode _responseType;
			public bool IsSuccess { get; set; }
			public string Data { get; set; }

			public ApiResponse(
				HttpStatusCode responseType)
			{
				_responseType = responseType;
			}

			public void Display()
			{
				Console.WriteLine("\n---------------------------");
				Console.WriteLine($"Response Type: {_responseType.ToString()}");
				Console.WriteLine($" Success status : {IsSuccess}");
				Console.WriteLine($" Data : {Data}");
			}
		}

		/// <summary>
		/// - The 'Builder' abstract class
		/// - This abstract base class defines all of the steps that must be taken in order to correctly create a product
		/// </summary>
		abstract class ApiResponseBuilder
		{
			protected ApiResponse response;

			public ApiResponse Response
			{
				get { return response; }
			}

			public abstract void AddCompletionStatus(bool status);
			public abstract void AddResponseData(string data);
		}

		/// <summary>
		/// - The 'ConcreteBuilder1' class
		/// - There may be any number of concrete builder classes inheriting from Builder
		/// - These classes contain the functionality to create a particular complex product
		/// </summary>
		class OKBuilder : ApiResponseBuilder
		{
			public OKBuilder()
			{
				response = new ApiResponse(HttpStatusCode.OK);
			}

			public override void AddCompletionStatus(bool status)
			{
				response.IsSuccess = status;
			}

			public override void AddResponseData(string data)
			{
				response.Data = data;
			}
		}

		/// <summary>
		/// - The 'ConcreteBuilder2' class
		/// - There may be any number of concrete builder classes inheriting from Builder
		/// - These classes contain the functionality to create a particular complex product
		/// </summary>
		class NotFoundBuilder : ApiResponseBuilder
		{
			public NotFoundBuilder()
			{
				response = new ApiResponse(HttpStatusCode.NotFound);
			}

			public override void AddCompletionStatus(bool status)
			{
				response.IsSuccess = status;
			}

			public override void AddResponseData(string data)
			{
				response.Data = data;
			}
		}

		/// <summary>
		/// - The 'Director' class
		/// - The director-class controls the algorithm that generates the final product object
		/// - A director object is instantiated and its Construct method is called
		/// </summary>
		class ApiResponseDirector
		{
			public ApiResponse Construct(ApiResponseBuilder responseBuilder, bool status, string data)
			{
				responseBuilder.AddCompletionStatus(status);
				responseBuilder.AddResponseData(data);
				return responseBuilder.Response;
			}
		}
	}
}
